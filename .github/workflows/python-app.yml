name: CI/CD Pipeline to EC2 with Docker Compose

on:
  push:
    branches: [ main ]  # Trigger on push to the main branch
  pull_request:
    branches: [ main ]  # Trigger on pull requests to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Docker Compose (required on the runner)
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version  # Verify installation

    # Step 3: Log in to Docker Hub
    - name: Log in to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

    # Step 4: Build and push Docker image using docker-compose
    - name: Build and push Docker image
      run: |
        docker-compose build  # Build the image defined in docker-compose.yml
        docker-compose push   # Push the image to Docker Hub

    # Step 5: Configure SSH Key for EC2
    - name: Configure SSH Key
      run: |
        echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key.pem
        chmod 600 /tmp/ec2_key.pem

    # Step 6: Deploy to EC2 using Docker Compose
    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
      run: |
        echo "Deploying application to EC2 instance at $EC2_HOST"
        
        # Connect to the EC2 instance and deploy the application using Docker Compose
        ssh -i /tmp/ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST <<EOF
          # Log in to Docker Hub on the EC2 instance
          echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # Pull the latest image
          docker-compose pull  # Pull the latest image from Docker Hub

          # Stop and remove the old container if it exists
          docker-compose down || true

          # Start the application using Docker Compose
          docker-compose up -d
        EOF
