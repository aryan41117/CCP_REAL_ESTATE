name: CI/CD for Flask Application

on:
  push:
    branches:
      - main  # Trigger the workflow when pushing to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx (for multi-platform builds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Step 3: Login to Docker Hub using Docker Login Action
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build the Docker image using Docker Compose
    - name: Build Docker image
      run: |
        docker-compose -f docker-compose.yml build

    # Step 5: Push the Docker image to Docker Hub
    - name: Push Docker image to Docker Hub
      run: |
        docker-compose -f docker-compose.yml push

    # Step 6: Deploy to EC2 using SSH
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.0
      with:
        host: ${{ secrets.EC2_HOST }}  # EC2 host IP or domain stored in GitHub secrets
        username: ${{ secrets.EC2_USERNAME }}  # EC2 username (typically 'ubuntu' for Ubuntu instances)
        key: ${{ secrets.EC2_PRIVATE_KEY }}  # EC2 private key stored in GitHub secrets
        port: 22  # EC2 SSH port (default is 22)
        script: |
          # Pull the latest image from Docker Hub
          docker pull <your-dockerhub-username>/finalcpprealestate:latest  # Replace with your actual Docker Hub username and image name
          
          # Stop and remove the running container if it exists
          docker stop flask_app || true
          docker rm flask_app || true

          # Run the new Docker container
          docker run -d -p 8080:8080 --name flask_app <your-dockerhub-username>/finalcpprealestate:latest  # Replace with your actual Docker Hub username and image name
